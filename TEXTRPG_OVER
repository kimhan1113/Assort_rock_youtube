// 어소트락 유튜브 강의

#include "pch.h"
#include <time.h>
#include <iostream>

using namespace std;

enum MAIN_MENU
{
	MM_NONE,
	MM_MAP,
	MM_STORE,
	MM_INVENTORY,
	MM_EXIT
};

enum MAP_TYPE
{
	MT_NONE,
	MT_EASY,
	MT_NOMAL,
	MT_HARD,
	MT_BACK
};

enum JOB
{
	JOB_NONE,
	JOB_KNIGHT,
	JOB_ARCHER,
	JOB_WIZARD,
	JOB_END
};

enum BATTLE
{
	BATTLE_NONE,
	BATTLE_ATTACK,
	BATTLE_BACK
};

enum ITEM_TYPE
{
	IT_NONE,
	IT_WEAPON,
	IT_ARMOR,
	IT_BACK
};

enum STORE_MENU
{
	SN_NONE,
	SN_WEAPON,
	SN_ARMOR,
	SN_BACK
};

enum EQUIP
{
	EQ_WEAPON,
	EQ_ARMOR,
	EQ_MAX
};

#define NAME_SIZE			32
#define ITEM_DESC_LENGTH	512
#define INVENTORY_MAX		20
#define STORE_WEAPON_MAX	3
#define STORE_ARMOR_MAX		3
#define LEVEL_MAX			10

struct _tagitem
{
	char strName[NAME_SIZE];
	char strTypeName[NAME_SIZE];
	ITEM_TYPE eType;

	int iMin;
	int iMax;
	int iPrice;
	int iSell;
	char strDesc[ITEM_DESC_LENGTH];
};

struct _tagInventory
{
	_tagitem	tItem[INVENTORY_MAX];
	int			iGold;
	int			tItemCnt;
};

struct _tagPlayer
{
	char	strName[NAME_SIZE];
	char	strJobName[NAME_SIZE];
	JOB		eJob;

	int		iAttackMin;
	int		iAttackMax;
	int		iArmorMin;
	int		iArmorMax;

	int		iHP;
	int		iHPMax;
	int		iMP;
	int		iMPMax;
	int		iExp;
	int		iLevel;

	_tagitem	  tEquip[EQ_MAX];
	bool		  bEquip[EQ_MAX];
	_tagInventory tInventory;
};

struct _tagMonster
{
	char	strName[NAME_SIZE];

	int		iAttackMin;
	int		iAttackMax;
	int		iArmorMin;
	int		iArmorMax;

	int		iHP;
	int		iHPMax;
	int		iMP;
	int		iMPMax;

	int		iLevel;
	int		iExp;
	int		iGoldMin;
	int		iGoldMax;
};

struct _tagLevelUpStatus
{
	int iAttackMin;
	int	iAttackMax;
	int	iArmorMin;
	int	iArmorMax;
	int	iHPMin;
	int	iHPMax;
	int	iMPMin;
	int	iMPMax;
};

int main()
{
	srand((unsigned int)time(0));

	// 레벨업에 필요한 경험치 목록 
	const int	iLevelUpExp[LEVEL_MAX] = { 4000, 10000, 20000, 35000, 50000, 70000, 100000, 150000, 200000, 400000 };

	///////////////////////////////////////////////////////////
	_tagLevelUpStatus	tLvUpTable[JOB_END - 1] = {};

	tLvUpTable[JOB_KNIGHT - 1].iAttackMin = 4;
	tLvUpTable[JOB_KNIGHT - 1].iAttackMax = 10;
	tLvUpTable[JOB_KNIGHT - 1].iArmorMin = 8;
	tLvUpTable[JOB_KNIGHT - 1].iArmorMax = 16;
	tLvUpTable[JOB_KNIGHT - 1].iHPMin = 50;
	tLvUpTable[JOB_KNIGHT - 1].iHPMax = 100;
	tLvUpTable[JOB_KNIGHT - 1].iMPMin = 10;
	tLvUpTable[JOB_KNIGHT - 1].iMPMax = 20;

	tLvUpTable[JOB_ARCHER - 1].iAttackMin = 10;
	tLvUpTable[JOB_ARCHER - 1].iAttackMax = 15;
	tLvUpTable[JOB_ARCHER - 1].iArmorMin = 5;
	tLvUpTable[JOB_ARCHER - 1].iArmorMax = 10;
	tLvUpTable[JOB_ARCHER - 1].iHPMin = 30;
	tLvUpTable[JOB_ARCHER - 1].iHPMax = 60;
	tLvUpTable[JOB_ARCHER - 1].iMPMin = 30;
	tLvUpTable[JOB_ARCHER - 1].iMPMax = 50;

	tLvUpTable[JOB_WIZARD - 1].iAttackMin = 15;
	tLvUpTable[JOB_WIZARD - 1].iAttackMax = 20;
	tLvUpTable[JOB_WIZARD - 1].iArmorMin = 3;
	tLvUpTable[JOB_WIZARD - 1].iArmorMax = 7;
	tLvUpTable[JOB_WIZARD - 1].iHPMin = 20;
	tLvUpTable[JOB_WIZARD - 1].iHPMax = 40;
	tLvUpTable[JOB_WIZARD - 1].iMPMin = 50;
	tLvUpTable[JOB_WIZARD - 1].iMPMax = 100;
	/////////////////////////////////////////////////////////////

	// 캐릭터 생성 //////////////////////////////////////////////
	_tagPlayer tPlayer = {};

	cout << "이름 : ";
	cin.getline(tPlayer.strName, NAME_SIZE - 1);

	int iJob = JOB_NONE;
	while (iJob == JOB_NONE)
	{
		system("cls");

		cout << "1. 기사" << endl;
		cout << "2. 궁수" << endl;
		cout << "3. 마법사" << endl;
		cout << "직업을 선택하세요 : ";

		cin >> iJob;
		
		if (cin.fail())
		{
			cin.clear();
			cin.ignore(1024, '\n');
			continue;
		}
		// 예외 처리
		else if (iJob <= JOB_NONE || iJob >= JOB_END)
			iJob = JOB_NONE;
	}

	tPlayer.iLevel = 1;
	tPlayer.iExp = 0;
	tPlayer.eJob = (JOB)iJob;
	tPlayer.tInventory.iGold = 10000;

	switch (tPlayer.eJob)
	{
	case JOB_KNIGHT:
		strcpy_s(tPlayer.strJobName, "기사");
		tPlayer.iAttackMin = 5;
		tPlayer.iAttackMax = 10;
		tPlayer.iArmorMin = 15;
		tPlayer.iArmorMax = 20;

		tPlayer.iHPMax = 500;
		tPlayer.iHP = 500;
		tPlayer.iMP = 100;
		tPlayer.iMPMax = 100;
		break;

	case JOB_ARCHER:
		strcpy_s(tPlayer.strJobName, "궁수");
		tPlayer.iAttackMin = 10;
		tPlayer.iAttackMax = 15;
		tPlayer.iArmorMin = 10;
		tPlayer.iArmorMax = 15;

		tPlayer.iHPMax = 400;
		tPlayer.iHP = 400;
		tPlayer.iMP = 200;
		tPlayer.iMPMax = 200;
		break;

	case JOB_WIZARD:
		strcpy_s(tPlayer.strJobName, "마법사");
		tPlayer.iAttackMin = 15;
		tPlayer.iAttackMax = 20;
		tPlayer.iArmorMin = 5;
		tPlayer.iArmorMax = 10;

		tPlayer.iHPMax = 300;
		tPlayer.iHP = 300;
		tPlayer.iMP = 300;
		tPlayer.iMPMax = 300;
		break;
	}

	///////////////////////////////////////////////////////////////

	// 몬스터 생성 ////////////////////////////////////////////////
	_tagMonster tMonsterArr[MT_BACK - 1] = {};

	strcpy_s(tMonsterArr[0].strName, "고블린");
	tMonsterArr[0].iAttackMin = 20;
	tMonsterArr[0].iAttackMax = 30;
	tMonsterArr[0].iArmorMin = 2;
	tMonsterArr[0].iArmorMax = 5;

	tMonsterArr[0].iHP = 100;
	tMonsterArr[0].iHPMax = 100;
	tMonsterArr[0].iMP = 10;
	tMonsterArr[0].iMPMax = 10;

	tMonsterArr[0].iLevel = 1;
	tMonsterArr[0].iExp = 1000;
	tMonsterArr[0].iGoldMin = 500;
	tMonsterArr[0].iGoldMax = 1500;

	strcpy_s(tMonsterArr[1].strName, "트롤");
	tMonsterArr[1].iAttackMin = 80;
	tMonsterArr[1].iAttackMax = 130;
	tMonsterArr[1].iArmorMin = 60;
	tMonsterArr[1].iArmorMax = 90;
				
	tMonsterArr[1].iHP = 2000;
	tMonsterArr[1].iHPMax = 2000;
	tMonsterArr[1].iMP = 100;
	tMonsterArr[1].iMPMax = 100;
				
	tMonsterArr[1].iLevel = 5;
	tMonsterArr[1].iExp = 7000;
	tMonsterArr[1].iGoldMin = 6000;
	tMonsterArr[1].iGoldMax = 8000;

	strcpy_s(tMonsterArr[2].strName, "드래곤");
	tMonsterArr[2].iAttackMin = 250;
	tMonsterArr[2].iAttackMax = 500;
	tMonsterArr[2].iArmorMin = 200;
	tMonsterArr[2].iArmorMax = 400;
				
	tMonsterArr[2].iHP = 30000;
	tMonsterArr[2].iHPMax = 30000;
	tMonsterArr[2].iMP = 20000;
	tMonsterArr[2].iMPMax = 20000;
				
	tMonsterArr[2].iLevel = 10;
	tMonsterArr[2].iExp = 30000;
	tMonsterArr[2].iGoldMin = 20000;
	tMonsterArr[2].iGoldMax = 50000;

	// 아이템 목록
	_tagitem	tStoreWeapon[STORE_WEAPON_MAX] = {};
	_tagitem	tStoreArmor[STORE_ARMOR_MAX] = {};

	strcpy_s(tStoreWeapon[0].strName, "목검");
	strcpy_s(tStoreWeapon[0].strTypeName, "무기");
	strcpy_s(tStoreWeapon[0].strDesc, "나무로 만든 칼");
	tStoreWeapon[0].eType = IT_WEAPON;
	tStoreWeapon[0].iMin = 5;
	tStoreWeapon[0].iMax = 10;
	tStoreWeapon[0].iPrice = 1000;
	tStoreWeapon[0].iSell = 500;

	strcpy_s(tStoreWeapon[1].strName, "장궁");
	strcpy_s(tStoreWeapon[1].strTypeName, "무기");
	strcpy_s(tStoreWeapon[1].strDesc, "짱짱한 활");
	tStoreWeapon[1].eType = IT_WEAPON;
	tStoreWeapon[1].iMin = 20;
	tStoreWeapon[1].iMax = 40;
	tStoreWeapon[1].iPrice = 7000;
	tStoreWeapon[1].iSell = 3500;

	strcpy_s(tStoreWeapon[2].strName, "지팡이");
	strcpy_s(tStoreWeapon[2].strTypeName, "무기");
	strcpy_s(tStoreWeapon[2].strDesc, "나무로 만든 지팡이");
	tStoreWeapon[2].eType = IT_WEAPON;
	tStoreWeapon[2].iMin = 90;
	tStoreWeapon[2].iMax = 150;
	tStoreWeapon[2].iPrice = 30000;
	tStoreWeapon[2].iSell = 15000;

	// ================ 방어구정보 설정 =================
	strcpy_s(tStoreArmor[0].strName, "천갑옷");
	strcpy_s(tStoreArmor[0].strTypeName, "방어구");
	strcpy_s(tStoreArmor[0].strDesc, "천으로 만든 허접한 갑옷");
	tStoreArmor[0].eType = IT_ARMOR;
	tStoreArmor[0].iMin = 2;
	tStoreArmor[0].iMax = 5;
	tStoreArmor[0].iPrice = 1000;
	tStoreArmor[0].iSell = 500;

	strcpy_s(tStoreArmor[1].strName, "가죽갑옷");
	strcpy_s(tStoreArmor[1].strTypeName, "방어구");
	strcpy_s(tStoreArmor[1].strDesc, "동물 가죽으로 만든 질긴 갑옷");
	tStoreArmor[1].eType = IT_ARMOR;
	tStoreArmor[1].iMin = 10;
	tStoreArmor[1].iMax = 20;
	tStoreArmor[1].iPrice = 7000;
	tStoreArmor[1].iSell = 3500;

	strcpy_s(tStoreArmor[2].strName, "풀플레이트아머");
	strcpy_s(tStoreArmor[2].strTypeName, "방어구");
	strcpy_s(tStoreArmor[2].strDesc, "강철로 만든 판금갑옷");
	tStoreArmor[2].eType = IT_ARMOR;
	tStoreArmor[2].iMin = 70;
	tStoreArmor[2].iMax = 90;
	tStoreArmor[2].iPrice = 30000;
	tStoreArmor[2].iSell = 15000;

	//////////////////////////////////////////////////////////////////////

	while (true)
	{
		system("cls");

		cout << " ================ 로비 =======================" << endl;
		cout << "1. 맵" << endl;
		cout << "2. 상점" << endl;
		cout << "3. 가방" << endl;
		cout << "4. 종료" << endl;
		cout << "메뉴를 선택하세요 : ";
		
		// 메뉴 입력
		int iMenu;
		cin >> iMenu;

		if (cin.fail())
		{
			cin.clear();
			cin.ignore(1024, '\n');
			continue;
		}

		// 종료
		if (iMenu == MM_EXIT)
			break;

		switch (iMenu)
		{
		case MM_MAP:
			while (true)
			{
				system("cls");
				cout << " ================ 맵 =======================" << endl;
				cout << "1. 쉬움" << endl;
				cout << "2. 보통" << endl;
				cout << "3. 어려움" << endl;
				cout << "4. 뒤로가기" << endl;

				cin >> iMenu;

				if (cin.fail())
				{
					cin.clear();
					cin.ignore(1024, '\n');
					continue;
				}

				if (iMenu == MT_BACK)
					break;	// while문 break

				_tagMonster tMonster = tMonsterArr[iMenu - 1];

				while (true)
				{
					system("cls");
					switch (iMenu)
					{
					case MT_EASY:
						cout << " ================ 쉬움 =======================" << endl;
						break;

					case MT_NOMAL:
						cout << " ================ 보통 =======================" << endl;
						break;

					case MT_HARD:
						cout << " ================ 어려움 =======================" << endl;
						break;
					}

					// 플레이어 정보
					cout << " ================ Player =======================" << endl;
					cout << "이름 : " << tPlayer.strName
						<< "\t직업 : " << tPlayer.strJobName << endl <<endl;
					cout << "레벨 : " << tPlayer.iLevel
						<< "\t경험치 : " << tPlayer.iExp << " / " 
						<< iLevelUpExp[tPlayer.iLevel-1] << endl << endl;

					///////////////////////////////////////////////////////////

					// 무기를 장착하고 있을 경우 공격력에 무기공격력을 추가하여 출력한다.
					if (tPlayer.bEquip[EQ_WEAPON] == true)
					{
						cout << "공격력 : " << tPlayer.iAttackMin << " + " <<
							tPlayer.tEquip[EQ_WEAPON].iMin << " - " <<
							tPlayer.iAttackMax << " + " << tPlayer.tEquip[EQ_WEAPON].iMax;
					}

					else
					{
						cout << "공격력 : " << tPlayer.iAttackMin << " - " <<
							tPlayer.iAttackMax;
					}

					// 방어구를 장착하고 있을 경우 방어력에 방어구 방어력을 추가하여 출력한다.
					if (tPlayer.bEquip[EQ_ARMOR] == true)
					{
						cout << "\t방어력 : " << tPlayer.iArmorMin << " + " <<
							tPlayer.tEquip[EQ_ARMOR].iMin << " - " <<
							tPlayer.iArmorMax << " + " << tPlayer.tEquip[EQ_ARMOR].iMax << endl;
					}

					else
					{
						cout << "\t방어력 : " << tPlayer.iArmorMin << " - " <<
							tPlayer.iArmorMax << endl;
					}
					
					///////////////////////////////////////////////////////////

					cout << "HP : " << tPlayer.iHP << " / "
						<< tPlayer.iHPMax << endl;
					cout << "MP : " << tPlayer.iMP << " / "
						<< tPlayer.iMPMax << endl << endl;

					///////////////////////////////////////////////////////////
					if (tPlayer.bEquip[EQ_WEAPON])
						cout << "장착무기 : " << tPlayer.tEquip[EQ_WEAPON].strName;

					else
						cout << "장착무기 : 없음";

					if (tPlayer.bEquip[EQ_ARMOR])
						cout << "\t장착방어구 : " << tPlayer.tEquip[EQ_ARMOR].strName << endl;

					else
						cout << "\t장착방어구 : 없음" << endl;
					///////////////////////////////////////////////////////////

					cout << "보유 골드 : " << tPlayer.tInventory.iGold << " Gold" << endl << endl;

					// 몬스터 정보
					cout << " ================ Monster =======================" << endl;
					cout << "이름 : " << tMonster.strName << endl;
					cout<< "레벨: " << tMonster.iLevel << endl << endl;
					
					cout << "공격력 : " << tMonster.iAttackMin << " - "
						<< tMonster.iAttackMax << endl;
					cout << "방어력 : " << tMonster.iArmorMin << " - "
						<< tMonster.iArmorMax << endl << endl;;
					cout << "HP : " << tMonster.iHP << " / "
						<< tMonster.iHPMax << endl;
					cout << "MP : " << tMonster.iMP << " / "
						<< tMonster.iMPMax << endl << endl;
					cout << "획득 경험치 : " << tMonster.iExp
						<< "\t획득 골드 : " << tMonster.iGoldMin << " - " << tMonster.iGoldMax << endl << endl;
				

					cout << "1. 공격" << endl;
					cout << "2. 도망가기" << endl;
					cout << "메뉴를 선택하세요 :";

					cin >> iMenu;

					if (cin.fail())
					{
						cin.clear();
						cin.ignore(1024, '\n');
						continue;
					}

					else if (iMenu == BATTLE_BACK)
						break;
				
					switch (iMenu)
					{
					case BATTLE_ATTACK:
					{
						// Ex Min 5 Max 15
						// 15 - 5 + 1 == 11
						// 11로 나눈 나머지는 0 ~ 10 여기에 +5
						// 5 ~ 15 랜덤값
						int	iAttackMin = tPlayer.iAttackMin;
						int	iAttackMax = tPlayer.iAttackMax;

						// 무기를 장착하고 있을 경우 무기와 Min, Max를 더해준다.
						if (tPlayer.bEquip[EQ_WEAPON])
						{
							iAttackMin += tPlayer.tEquip[EQ_WEAPON].iMin;
							iAttackMax += tPlayer.tEquip[EQ_WEAPON].iMax;
						}

						int	iAttack = rand() % (iAttackMax - iAttackMin + 1) +
							iAttackMin;
						int	iArmor = rand() % (tMonster.iArmorMax - tMonster.iArmorMin + 1) +
							tMonster.iArmorMin;

						int	iDamage = iAttack - iArmor;

						// 최소데미지 1 고정
						// 삼항연산자 >> 조건식 ? true : false
						iDamage = iDamage < 1 ? 1 : iDamage;


						// 몬스터 HP 감소
						tMonster.iHP -= iDamage;

						cout << endl;
						cout << tPlayer.strName << " 가 " << tMonster.strName <<
							"에게 " << iDamage << " 피해를 입혔습니다" << endl;

						// 몬스터가 죽었을 경우
						if (tMonster.iHP <= 0)
						{
							cout << endl;
							cout << tMonster.strName << " 몬스터가 죽었습니다" << endl << endl;

							tPlayer.iExp += tMonster.iExp;
							int iGold = (rand() % (tMonster.iGoldMax - tMonster.iGoldMin + 1)
								+ tMonster.iGoldMin);
							tPlayer.tInventory.iGold += iGold;

							cout << tMonster.iExp << " 경험치를 획득했습니다" << endl;
							cout << iGold << " 골드를 획득했습니다" << endl << endl;

							// 몬스터 부활
							tMonster.iHP = tMonster.iHPMax;
							tMonster.iMP = tMonster.iMPMax;

							// 레벨업 체크
							if (tPlayer.iExp >= iLevelUpExp[tPlayer.iLevel - 1])
							{
								tPlayer.iExp -= iLevelUpExp[tPlayer.iLevel - 1];

								++tPlayer.iLevel;

								cout << tPlayer.iLevel << " 레벨업 " << endl;

							// 능력치를 상승시킨다
								int	iJobIndex = tPlayer.eJob - 1; 	// 직업 인덱스를 구한다.

								int	iHPUp = rand() % (tLvUpTable[iJobIndex].iHPMax - tLvUpTable[iJobIndex].iHPMin + 1) +
									tLvUpTable[iJobIndex].iHPMin;
								int	iMPUp = rand() % (tLvUpTable[iJobIndex].iMPMax - tLvUpTable[iJobIndex].iMPMin + 1) +
									tLvUpTable[iJobIndex].iMPMin;

								tPlayer.iAttackMin += tLvUpTable[iJobIndex].iAttackMin;
								tPlayer.iAttackMax += tLvUpTable[iJobIndex].iAttackMax;
								tPlayer.iArmorMin += tLvUpTable[iJobIndex].iArmorMin;
								tPlayer.iArmorMax += tLvUpTable[iJobIndex].iArmorMax;

								tPlayer.iHPMax += iHPUp;
								tPlayer.iMPMax += iMPUp;

								// 체력과 마나를 회복시킨다.
								tPlayer.iHP = tPlayer.iHPMax;
								tPlayer.iMP = tPlayer.iMPMax;
							}

							system("pause");
							break;
						}

						// 몬스터가 살아있을 경우 플레이어 공격
						iAttack = rand() % (tMonster.iAttackMax - tMonster.iAttackMin + 1) +
							tMonster.iAttackMin;

						int	iArmorMin = tPlayer.iArmorMin;
						int	iArmorMax = tPlayer.iArmorMax;

						if (tPlayer.bEquip[EQ_ARMOR])
						{
							iArmorMin += tPlayer.tEquip[EQ_ARMOR].iMin;
							iArmorMax += tPlayer.tEquip[EQ_ARMOR].iMax;
						}
						 
						iArmor = rand() % (iArmorMax - iArmorMin + 1) +
							iArmorMin;

						iDamage = iAttack - iArmor;
					
						iDamage = iDamage < 1 ? 1 : iDamage;

						tPlayer.iHP -= iDamage;

						cout << tMonster.strName << " 가 " << tPlayer.strName <<
							"에게 " << iDamage << " 피해를 입혔습니다" << endl;

						// 플레이어 사망
						if (tPlayer.iHP <= 0)
						{
							cout << endl;
							cout << tPlayer.strName << " 플레이어가 죽었습니다" << endl << endl;

							int iExp = tPlayer.iExp * 0.1f;
							int iGold = tPlayer.tInventory.iGold * 0.1f;

							tPlayer.iExp -= iExp;
							tPlayer.tInventory.iGold -= iGold;

							cout << iExp << " 경험치를 잃었습니다" << endl;
							cout << iGold << " 골드를 잃었습니다" << endl << endl;

							// 플레이어 부활
							tPlayer.iHP = tPlayer.iHPMax;
							tPlayer.iMP = tPlayer.iMPMax;
						}

						system("pause");
					}

					case BATTLE_BACK:
						break;
					}
				}
				
			}
			break;	// 스위치문 break

		case MM_STORE:
			while (true)
			{
				system("cls");
				cout << " ================ 상점 =======================" << endl;
				cout << "1. 무기 상점" << endl;
				cout << "2. 방어구 상점" << endl;
				cout << "3. 뒤로가기" << endl;
				
				cin >> iMenu;

				if (cin.fail())
				{
					cin.clear();
					cin.ignore(1024, '\n');
					continue;
				}

				else if (iMenu == SN_BACK)
					break;

				switch (iMenu)
				{
				case SN_WEAPON:
					while (true)
					{
						system("cls");

						cout << " ================ 무기 상점 =======================" << endl;

						for (int i = 0; i < STORE_WEAPON_MAX; ++i)
						{
							cout << i + 1 << ". 이름 : " << tStoreWeapon[i].strName <<
								"\t종류 : " << tStoreWeapon[i].strTypeName << endl;

							cout << "공격력 : " << tStoreWeapon[i].iMin << " - " <<
								tStoreWeapon[i].iMax << endl;

							cout << "판매가격 : " << tStoreWeapon[i].iPrice <<
								"\t구매가격 : " << tStoreWeapon[i].iSell << endl;

							cout << "설명 : " << tStoreWeapon[i].strDesc << endl << endl;
						}

						cout << STORE_WEAPON_MAX + 1 << ". 뒤로가기" << endl;
						cout << "보유 금액 : " << tPlayer.tInventory.iGold << " GOLD" << endl;
						cout << "남은 공간 : " << INVENTORY_MAX - tPlayer.tInventory.tItemCnt << endl;
						cout << "구입할 아이템을 선택하세요 : ";

						cin >> iMenu;

						if (cin.fail())
						{
							cin.clear();
							cin.ignore(1024, '\n');
							continue;
						}

						// 종료
						else if (iMenu == STORE_WEAPON_MAX + 1)
							break;

						// 예외처리
						else if (iMenu < 1 || iMenu >STORE_WEAPON_MAX + 1)
						{
							cout << "잘못 선택했습니다" << endl;
							system("pause");
							continue;
						}

						// 상점판매목록 배열 인덱스
						int iWeaponIdx = iMenu - 1;

						// 인벤토리 검사
						if (tPlayer.tInventory.tItemCnt == INVENTORY_MAX)
						{
							cout << "가방이 가득 찼습니다" << endl;
							system("pause");
							continue;
						}

						// 잔액 부족
						else if (tPlayer.tInventory.iGold < tStoreWeapon[iWeaponIdx].iPrice)
						{
							cout << "잔액 부족" << endl;
							system("pause");
							continue;
						}

						tPlayer.tInventory.tItem[tPlayer.tInventory.tItemCnt] =
							tStoreWeapon[iWeaponIdx];
						++tPlayer.tInventory.tItemCnt;

						tPlayer.tInventory.iGold -= tStoreWeapon[iWeaponIdx].iPrice;

						cout << tStoreWeapon[iWeaponIdx].strName << " 아이템 구매 완료" << endl;
						system("pause");
					}
					break;

				case SN_ARMOR:
					while (true)
					{
						system("cls");

						cout << " ================ 방어구 상점 =======================" << endl;

						for (int i = 0; i < STORE_ARMOR_MAX; ++i)
						{
							cout << i + 1 << ". 이름 : " << tStoreArmor[i].strName <<
								"\t종류 : " << tStoreArmor[i].strTypeName << endl;

							cout << "방어력 : " << tStoreArmor[i].iMin << " - " <<
								tStoreArmor[i].iMax << endl;

							cout << "판매가격 : " << tStoreArmor[i].iPrice <<
								"\t구매가격 : " << tStoreArmor[i].iSell << endl;

							cout << "설명 : " << tStoreArmor[i].strDesc << endl << endl;
						}

						cout << STORE_ARMOR_MAX + 1 << ". 뒤로가기" << endl;
						cout << "보유 금액 : " << tPlayer.tInventory.iGold << " GOLD" << endl;
						cout << "남은 공간 : " << INVENTORY_MAX - tPlayer.tInventory.tItemCnt << endl;
						cout << "구입할 아이템을 선택하세요 : ";

						cin >> iMenu;

						if (cin.fail())
						{
							cin.clear();
							cin.ignore(1024, '\n');
							continue;
						}

						// 종료
						else if (iMenu == STORE_ARMOR_MAX + 1)
							break;

						// 예외처리
						else if (iMenu < 1 || iMenu >STORE_ARMOR_MAX + 1)
						{
							cout << "잘못 선택했습니다" << endl;
							system("pause");
							continue;
						}

						// 상점판매목록 배열 인덱스
						int iArmorIdx = iMenu - 1;

						// 인벤토리 검사
						if (tPlayer.tInventory.tItemCnt == INVENTORY_MAX)
						{
							cout << "가방이 가득 찼습니다" << endl;
							system("pause");
							continue;
						}

						// 잔액 부족
						else if (tPlayer.tInventory.iGold < tStoreArmor[iArmorIdx].iPrice)
						{
							cout << "잔액 부족" << endl;
							system("pause");
							continue;
						}

						tPlayer.tInventory.tItem[tPlayer.tInventory.tItemCnt] =
							tStoreArmor[iArmorIdx];
						++tPlayer.tInventory.tItemCnt;

						tPlayer.tInventory.iGold -= tStoreArmor[iArmorIdx].iPrice;

						cout << tStoreArmor[iArmorIdx].strName << " 아이템 구매 완료" << endl;
						system("pause");
					}
					break;
				}
			}
			break;

		case MM_INVENTORY:
			while (true)
			{
				system("cls");
				cout << " ****************** 가방 *********************" << endl;

				cout << " ================ Player =======================" << endl;
				cout << "이름 : " << tPlayer.strName
					<< "\t직업 : " << tPlayer.strJobName << endl << endl;
				cout << "레벨 : " << tPlayer.iLevel
					<< "\t경험치 : " << tPlayer.iExp << " / "
					<< iLevelUpExp[tPlayer.iLevel - 1] << endl << endl;

				// 무기를 장착하고 있을 경우 공격력에 무기공격력을 추가하여 출력한다.
				if (tPlayer.bEquip[EQ_WEAPON] == true)
				{
					cout << "공격력 : " << tPlayer.iAttackMin << " + " <<
						tPlayer.tEquip[EQ_WEAPON].iMin << " - " <<
						tPlayer.iAttackMax << " + " << tPlayer.tEquip[EQ_WEAPON].iMax;
				}

				else
				{
					cout << "공격력 : " << tPlayer.iAttackMin << " - " <<
						tPlayer.iAttackMax;
				}

				// 방어구를 장착하고 있을 경우 방어력에 방어구 방어력을 추가하여 출력한다.
				if (tPlayer.bEquip[EQ_ARMOR] == true)
				{
					cout << "\t방어력 : " << tPlayer.iArmorMin << " + " <<
						tPlayer.tEquip[EQ_ARMOR].iMin << " - " <<
						tPlayer.iArmorMax << " + " << tPlayer.tEquip[EQ_ARMOR].iMax << endl;
				}

				else
				{
					cout << "\t방어력 : " << tPlayer.iArmorMin << " - " <<
						tPlayer.iArmorMax << endl;
				}

				cout << "체력 : " << tPlayer.iHP << " / " << tPlayer.iHPMax <<
					"\t마나 : " << tPlayer.iMP << " / " << tPlayer.iMPMax << endl;

				if (tPlayer.bEquip[EQ_WEAPON])
					cout << "장착무기 : " << tPlayer.tEquip[EQ_WEAPON].strName;

				else
					cout << "장착무기 : 없음";

				if (tPlayer.bEquip[EQ_ARMOR])
					cout << "\t장착방어구 : " << tPlayer.tEquip[EQ_ARMOR].strName << endl;

				else
					cout << "\t장착방어구 : 없음" << endl;

				cout << endl;

				cout << "보유골드 : " << tPlayer.tInventory.iGold << " Gold" << endl << endl;

				for (int i = 0; i < tPlayer.tInventory.tItemCnt; ++i)
				{
					cout << i + 1 << ". 이름 : " << tPlayer.tInventory.tItem[i].strName <<
						"\t종류 : " << tPlayer.tInventory.tItem[i].strTypeName << endl;

					cout << "공격력 : " << tPlayer.tInventory.tItem[i].iMin << " - " <<
						tPlayer.tInventory.tItem[i].iMax << endl;

					cout << "판매가격 : " << tPlayer.tInventory.tItem[i].iPrice <<
						"\t구매가격 : " << tPlayer.tInventory.tItem[i].iSell << endl;

					cout << "설명 : " << tPlayer.tInventory.tItem[i].strDesc << endl << endl;
				}

				cout << tPlayer.tInventory.tItemCnt + 1 << ". 뒤로가기" << endl;
				cout << "장착할 아이템을 선택하세요 : ";
				cin >> iMenu;

				if (cin.fail())
				{
					cin.clear();
					cin.ignore(1024, '\n');
					continue;
				}

				// 종료
				else if (iMenu == tPlayer.tInventory.tItemCnt + 1)
					break;

				// 예외처리
				else if (iMenu < 1 || iMenu > tPlayer.tInventory.tItemCnt + 1)
				{
					cout << "잘못 선택했습니다" << endl;
					system("pause");
					continue;
				}

				// 아이템 인덱스
				int idx = iMenu - 1;

				EQUIP eq;

				switch (tPlayer.tInventory.tItem[idx].eType)
				{
				case IT_WEAPON:
					eq = EQ_WEAPON;
					break;
				case IT_ARMOR:
					eq = EQ_ARMOR;
					break;
				}

				// 장착된 아이템 교체
				if (tPlayer.bEquip[eq] == true)
				{
					_tagitem tSwap = tPlayer.tEquip[eq];
					tPlayer.tEquip[eq] = tPlayer.tInventory.tItem[idx];
					tPlayer.tInventory.tItem[idx] = tSwap;
				}

				// 장착 되어있지 않을 경우
				else
				{
					tPlayer.tEquip[eq] = tPlayer.tInventory.tItem[idx];

					for (int i = idx; i < tPlayer.tInventory.tItemCnt - 1; ++i)
					{
						tPlayer.tInventory.tItem[i] = tPlayer.tInventory.tItem[i + 1];
					}

					--tPlayer.tInventory.tItemCnt;

					tPlayer.bEquip[eq] = true;
				}

				cout << tPlayer.tEquip[eq].strName << "아이템을 장착했습니다" << endl;

				system("pause");
			}
			break;

		default:
			cout << "잘못 선택하셨습니다." << endl;
		}
	} // while문 


	return 0;
}
